// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/belamov/ypgo-url-shortener/internal/app/services/random (interfaces: Generator)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockGenerator is a mock of Generator interface.
type MockGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockGeneratorMockRecorder
}

// MockGeneratorMockRecorder is the mock recorder for MockGenerator.
type MockGeneratorMockRecorder struct {
	mock *MockGenerator
}

// NewMockGenerator creates a new mock instance.
func NewMockGenerator(ctrl *gomock.Controller) *MockGenerator {
	mock := &MockGenerator{ctrl: ctrl}
	mock.recorder = &MockGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGenerator) EXPECT() *MockGeneratorMockRecorder {
	return m.recorder
}

// GenerateNewUserID mocks base method.
func (m *MockGenerator) GenerateNewUserID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateNewUserID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateNewUserID indicates an expected call of GenerateNewUserID.
func (mr *MockGeneratorMockRecorder) GenerateNewUserID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateNewUserID", reflect.TypeOf((*MockGenerator)(nil).GenerateNewUserID))
}

// GenerateRandomBytes mocks base method.
func (m *MockGenerator) GenerateRandomBytes(arg0 int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateRandomBytes", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateRandomBytes indicates an expected call of GenerateRandomBytes.
func (mr *MockGeneratorMockRecorder) GenerateRandomBytes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRandomBytes", reflect.TypeOf((*MockGenerator)(nil).GenerateRandomBytes), arg0)
}
